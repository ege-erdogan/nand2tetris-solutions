// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:

		//use three layers of dmux'es to direct the input to the correct register
		DMux(in=load, sel=address[0], a=dmux0, b=dmux1);

		DMux(in=dmux0, sel=address[1], a=dmux2, b=dmux3);
		DMux(in=dmux1, sel=address[1], a=dmux4, b=dmux5);

		DMux(in=dmux2, sel=address[2], a=l0, b=l1);
		DMux(in=dmux3, sel=address[2], a=l2, b=l3);
		DMux(in=dmux4, sel=address[2], a=l4, b=l5);
		DMux(in=dmux5, sel=address[2], a=l6, b=l7);

		// 8 registers for storage
		Register(in=in, load=l0, out=out0);
		Register(in=in, load=l1, out=out1);
		Register(in=in, load=l2, out=out2);
		Register(in=in, load=l3, out=out3);
		Register(in=in, load=l4, out=out4);
		Register(in=in, load=l5, out=out5);
		Register(in=in, load=l6, out=out6);
		Register(in=in, load=l7, out=out7);

		//same process as above to direct the output from the same address
		Mux16(a=out0, b=out1, sel=address[2], out=mux0);
		Mux16(a=out2, b=out3, sel=address[2], out=mux1);
		Mux16(a=out4, b=out5, sel=address[2], out=mux2);
		Mux16(a=out6, b=out7, sel=address[2], out=mux3);

		Mux16(a=mux0, b=mux1, sel=address[1], out=mux4);
		Mux16(a=mux2, b=mux3, sel=address[1], out=mux5);

		Mux16(a=mux4, b=mux5, sel=address[0], out=out);
}